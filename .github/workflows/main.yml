name: NotesApp CI/CD Pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  # ==========================
  # TEST STAGE 
  # ==========================
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}     
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Apply Migrations
        env:
          DJANGO_SETTINGS_MODULE: mynotes.settings
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: localhost
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          python manage.py makemigrations api
          python manage.py migrate


      - name: Run Tests
        env:
          DJANGO_SETTINGS_MODULE: mynotes.settings
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: localhost
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest -q --tb=short -s --color=yes

  # ==========================
  # BUILD & PUSH STAGE
  # ==========================
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/notes-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/notes-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/notes-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/notes-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/notes-app:latest

  # ==========================
  # DEPLOY STAGE
  # ==========================
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  
            echo "Deploying latest version..."
            cd /home/${{ secrets.SERVER_USER }}/notesapp
            docker-compose pull --quiet
            docker-compose up -d --remove-orphans
  
            echo "Cleaning up unused Docker resources..."
            docker system prune -f
